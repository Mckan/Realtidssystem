* mom1-low.s12
********************************************************

* KONSTANTER

********************************************************
	segment abs

********************************************************



* Definitioner för RTC-kretsen i HC12 
CRGFLG 	EQU 	$37
CRGINT	EQU	$38
RTICTL 	EQU	$3B

* Flagga
RTIF	EQU	$80
STKSIZE	EQU 	$40 		stackutrymmen för program

********************************************************

* DATADEKLARATIONER

********************************************************
      segment bss

********************************************************

      
*'STKSIZE' bytes stackutrymme för 'producer' 
	RMB	STKSIZE-1
a_stack_producer	RMB	1

*'STKSIZE' bytes stackutrymme för 'consumer' RMB STKSIZE-1
a_stack_consumer	RMB	1

RUNNING		RMB	1	anger exekverande program 

* temporär lagring stackpekare för 'RUNNING' 
current_sp 	RMB 	2

* temporär lagring stackpekare för 'producer' 
producer_sp 	RMB 	2

* temporär lagring stackpekare för 'consumer' 
consumer_sp 	RMB 	2

********************************************************

* LOGIK

********************************************************
	segment text

********************************************************

* Följande funktioner här definierade i 'mom1.c' 
	extern	_producer
	extern	_consumer

* Programexekveringen startar här *
	define	_main
	entry	_main 

_main:
*	INIT PRODUCER
	LDS	#a_stack_producer
	LDX	#_producer
	PSHX 			Lägg in startadress till PC och sedan lite dummy innehåll
	PSHY 	
	PSHX	
	PSHA 	
	PSHB 
	
* sist placerar vi CCR för process 1, här måste I-flaggan
* vara 0 för att processbyten ska kunna utföras senare. Vi kan dock
* inte nollställa I-flaggan ännu, ty avbrottshanteringen är ännu inte
* fullständigt initierad, vi använder A-registret för att skapa ett
* CC-innehåll på stacken
	TPA			Flaggorna till A
	ANDA 	#%11101111	Nollställ I flaggan
	PSHA
	STS 	producer_sp
*	INIT PRODUCER END
*
*	INIT CONSUMER	
	LDS	#a_stack_consumer
	LDX	#_consumer
	PSHX 			Lägg in startadress till PC och sedan lite dummy innehåll
	PSHY 	
	PSHX	
	PSHA 	
	PSHB 

* sist placerar vi CCR för process 1, här måste I-flaggan
* vara 0 för att processbyten ska kunna utföras senare. Vi kan dock
* inte nollställa I-flaggan ännu, ty avbrottshanteringen är ännu inte
* fullständigt initierad, vi använder A-registret för att skapa ett
* CC-innehåll på stacken
	TPA			Flaggorna till A
	ANDA 	#%11101111	Nollställ I flaggan
	PSHA
	STS 	producer_sp
*	INIT CONSUMER END
*
*	INIT RTC
*	avbrottsvektor måste initieras under DBG12...
	LDX 	#timer_interrupt
	STX	$3FF0		Avbrottsvektor RTC
	
* 	men vi skriver den också till rätt adress
* 	för att även kunna använda exemplet i simulatorn...
	STX	$FFF0
	
* 	initiera RTC:n för önskad avbrottsfrekvens 
	MOVB	#$49,RTICTL

* 	tidsbas 10,24 ms, se exempel ovan
* 	initiera RTC
	MOVB	#$80,CRGINT	aktivera avbrott
	
* 	nollställ I-flagga så att avbrott accepteras
	CLI
*	INIT RTC END
*
*	START PRODUCER
*	starta producer på samma sätt som time_interrupt
	CLR	RUNNING
	MOVB	#a_stack_producer,current_sp
	LDS	current_sp
	RTI

timer_interrupt:
	LDD	0,SP
	STD	current_sp		Spara stackpekaren i current_sp
	TST	RUNNING			Testa running variabeln
	BNE	switch			Hoppa till byte från consumer till producer om den inte är 0
	MOVB	producer_sp,current_sp 	Kopiera producer_sp till current_sp
	MOVB	#1,RUNNING		Spara en 1a i RUNNING för att köra annan process nästa gång 
	MOVB	current_sp,consumer_sp	Byt nu från producer till consumer
	JMP	restore

switch	MOVB	consumer_sp,current_sp 	Spara stackpekaren i current_sp
	MOVB	#0,RUNNING		Spara nolla i running för att köra andra processen nästa gång
	MOVB	current_sp,producer_sp	Kopiera current_sp till producer_sp för att byta process
	
restore	LDS	current_sp		Spara ny stackpekaren i SP
	MOVB	#80,CRGFLG		Kvittera avbrottet
	RTI
	
* Exekveringen kommer aldrig hit...